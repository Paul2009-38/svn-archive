#!/usr/bin/env perl -w

use strict;
use LWP;
use Data::Dumper;
use URI::Escape qw( uri_escape );
use POSIX;
use Getopt::Long;
use Pod::Usage;
use File::Copy;            # move
use File::Spec::Functions; # catfile
use File::Path qw(mkpath);
use Digest::MD5;

sub write_binfile {
    my ($path, $content) = @_;
    die "Missing path" if ! $path;
    open(OUT, "> $path") || die "Could not write into $path";
    binmode(OUT);
    print OUT $content;
    close OUT;
}

sub file_md5 {
    my $file = shift || die "No path provided";
    open(FILE, $file) or die "Can't open '$file': $!";
    binmode(FILE);
    my $md5 = Digest::MD5->new;
    while (<FILE>) {
        $md5->add($_);
    }
    close(FILE);
    return $md5->hexdigest;
}    

my $ville;
my $departement;
my $feuille;
my $agrandissement = 0.08;
my $repertoire;
my $garderTuiles;
my $transparence;
my $rognage = 1;

# Quand le serveur a des ratés, il renvoie un fichier PNG
# affichant un message d'erreur. Ceci est la somme MD5 de ce fichier :
my $md5TuileErreur = "126813103185c78725506506f1724ee3";

my $tmpFilename = tmpnam() . ".png";

{
    my ($help);
    # Gestion des arguments :
    GetOptions(
            "ville=s"        => \$ville,
            "departement=s"  => \$departement,
            "feuille=s"      => \$feuille,
            "agrandissement=f" => \$agrandissement,
            "repertoire=s"   => \$repertoire,
            "gardertuiles"   => \$garderTuiles,
            "transparence"   => \$transparence,
            "rognage!"       => \$rognage,
            "help"           => \$help,
            ) or pod2usage(2);
    
    ( $ville && $departement ) or pod2usage(2);
    ( ! @ARGV ) or pod2usage(2);
    pod2usage(2) if $help;
    if ( $departement =~ /^\d{1,2}$/ ) {
        $departement = sprintf ("%03d", $departement);
    }
    $repertoire = getcwd if ! defined($repertoire);
}

my $browser = LWP::UserAgent->new( );
$browser->cookie_jar( {} );
$browser->env_proxy();

if ( 0 ) {
    # Pour débugger les échanges HTTP :
    my $maxlength = 100;
    $browser->add_handler("request_send",  sub { shift->dump(maxlength=>$maxlength); return });
    $browser->add_handler("response_done", sub { shift->dump(maxlength=>$maxlength); return });
}

my $repertoireTuiles = catfile($repertoire, "tuiles");

foreach my $r ($repertoire, $repertoireTuiles) {
    if ( $r && ! -d $r ) {
        print "Création de $r...\n";
        mkpath($r);
    }

    if ( $r && ! -d $r ) {
        die "\"$r\" n'est pas un répertoire valide, et impossible de le créer";
    }
}

my $response;

print "Initialisation de la navigation et création du cookie...\n";
$response = $browser->get("http://www.cadastre.gouv.fr/scpc/rechercherPlan.do");

$response->is_error && die "Erreur de communication: " . $response->message;

print "Activation de la commune...\n";
$response = $browser->post(
  'http://www.cadastre.gouv.fr/scpc/rechercherPlan.do',
  [
    'numeroVoie'  => "",
    'indiceRepetition'  => "",
    'nomVoie'  => "",
    'lieuDit'  => "",
    'ville'  => $ville,
    'lieuDit'  => "",
    'codePostal'  => "",
    'codeDepartement'  => $departement,
    'nbResultatParPage'  => 10,
    'x' => 31,
    'y' => 11,
  ],
);

print "Récupération de la liste des feuilles...\n";
$response = $browser->get("http://www.cadastre.gouv.fr/scpc/listerFeuillesParcommune.do?keepVolatileSession=&offset=1000");
$response->is_error && die "Erreur de communication: " . $response->message;

my @feuilles;
{
    my %feuilles;
    while ( $response->{_content} =~ m/afficherCarteFeuille\.do\?f=([0-9A-Za-z]+)/g ) {
        $feuilles{$1}++;
    }
    @feuilles = keys(%feuilles);
}

if ( $feuille ) {
    if ( ! grep { $_ eq $feuille } @feuilles ) {
        print STDERR "La feuille \"$feuille\" n'est pas disponible. Liste des feuilles:\n  " . join("\n  ", @feuilles) . "\n";
        exit(1);
    }
    # On garde seulement la feuille de l'utilisateur :
    @feuilles  = ($feuille);
}

@feuilles = sort @feuilles;
print "Récupération de " . @feuilles . " feuille(s)...\n";

my $nFeuille = 0;
for my $feuille (@feuilles) {
    $nFeuille++;

    # Nom de base pour stocker les tuiles et la feuille :
    my $basename = "$departement-$ville-$feuille-$agrandissement";
    $basename =~ s/\s/_/g;

    my $feuilleFilename = $basename . "-feuille.png";
    my $feuilleFilepath = catfile($repertoire, $feuilleFilename);
    
    if ( -f $feuilleFilepath ) {
        printf "  La feuille $feuille (%d/%d) est déjà prête (%s)\n", $nFeuille, 1+$#feuilles, $feuilleFilename;
        next;
    }

    printf "  Activation de la feuille %s (%d/%d)...\n", $feuille, $nFeuille, 1+$#feuilles;
    $response = $browser->get("http://www.cadastre.gouv.fr/scpc/afficherCarteFeuille.do?f=$feuille&dontSaveLastForward&keepVolatileSession=");
    $response->is_error && die "Erreur de communication: " . $response->message;
    
    
    my ($xmin, $ymin, $xmax, $ymax);
    {
        my $content = $response->{_content};
        $content =~ s/[\s\n]+/ /g;
        $content =~ m/new GeoBox\s*\((.*?)\)/;
        my $s = $1;
        die "Impossible de récupérer la bbox pour $feuille" if ! $s;
        $s =~ s/\s+//g;
        $s =~ m/([0-9\.]+),([0-9\.]+),([0-9\.]+),([0-9\.]+)/ or die "Impossible de parser la bbox pour $feuille ($s)";
        ($xmin, $ymin, $xmax, $ymax) = ($1, $2, $3, $4);
    }
    # print "Trouvé la bbox: " . join(", ", ($xmin, $ymin, $xmax, $ymax)) . "\n";
    
    # Taille maximale acceptée par le serveur :
    my $width = 1100;
    my $height = 850;
    
    my ($x1, $y1, $x2, $y2) = ($xmin, $ymin, $xmin, $ymin);
    
    my ($i, $j, $n) = ( 0, 0, 0);
    
    my ($xd, $yd) = ( $width / $agrandissement, $height / $agrandissement);
    
    my ($xtiles, $ytiles) = ( ceil(($xmax-$xmin)/$xd), ceil(($ymax-$ymin)/$yd));
    
    
    my @tuileFilepaths;

    # Téléchargement des tuiles :    
    while ( $j < $ytiles ) {
        $y2 = $ymax - $j * $yd;
        $y1 = $y2 - $yd;
        $i=0;
        while ( $i < $xtiles ) {
            $n++;
            $x1 = $xmin + $i * $xd;
            $x2 = $x1 + $xd;
            $i++;
    
            my $tuileFilename = sprintf "%s-tuile-%05d.png", $basename, $n;
            my $tuileFilepath = catfile($repertoireTuiles, $tuileFilename);
            push @tuileFilepaths, $tuileFilepath;
            if ( -f $tuileFilepath && file_md5($tuileFilepath) ne $md5TuileErreur ) {
                printf "    La tuile %3d sur %3d est déjà téléchargée (%s).\n", $n,  ($xtiles * $ytiles), $tuileFilename;
                next;
            }

            my %params = (
                version=>"1.1",
                request=>"GetMap",
                layers=>"CDIF:PMC\@$feuille,CDIF:DRAPEAU",
                format=>"image/png",
                bbox=>"$x1,$y1,$x2,$y2",
                width=>$width,
                height=>$height,
                exception=>"application/vnd.ogc.se_inimage",
                styles=>""
            );
            my $params = join("&", map { $_ . "=" . ($params{$_}) } keys(%params) );
            my $url = "http://www.cadastre.gouv.fr/scpc/wms?$params";
            
            my $succes = 0;
            my $essais = 0;
            while ( ! $succes ) {
                $essais++;
                printf "    Récupération de la tuile %3d sur %3d pour la feuille %s (Bbox: %06.0f,%06.0f,%06.0f,%06.0f)\n", $n, $xtiles * $ytiles, $feuille, $x1, $y1, $x2, $y2;
                $response = $browser->get($url);
                $succes = 1;
                if ( $response->is_error ) {
                    print STDERR "Erreur de communication: " . $response->message . " (essai $essais)\n";
                    $succes = 0;
                }
                elsif ( Digest::MD5::md5_hex($response->{_content}) eq $md5TuileErreur) {
                    print STDERR "Le serveur du cadastre a renvoyé une erreur (essai $essais)\n";
                    $succes = 0;
                }
                
                if ( ! $succes && $essais > 3 ) {
                    die "Trop d'erreur, abondon";
                }
                elsif ( ! $succes ) {
                    printf "    La tuile %3d sur %3d pour la feuille %s va être téléchargée à nouveau\n", $n, $xtiles * $ytiles, $feuille;
                }
            }
            write_binfile($tmpFilename, $response->{_content}) or die "Impossible d'écrire $tmpFilename";
            move($tmpFilename, $tuileFilepath) or die "Impossible d'écrire $tuileFilepath";
        }
        $j++;
    }
    
    {
        # Collage des tuiles, nécessite ImageMagick :
        printf "  Collage des tuiles pour créer la feuille \"%s\" dans \"%s\"...\n", $feuille, $feuilleFilename;

        my @params = ("montage", @tuileFilepaths, "-tile", "${xtiles}x${ytiles}", "-geometry", "${width}x$height+0+0");
        system(@params, $tmpFilename) and die "montage a retourné une erreur";

        @params = ("convert", $tmpFilename);
        # -trim permet de retirer le bord tout blanc automatiquement
        push @params, "-trim" if $rognage;

        if ( ! $transparence ) {
            push @params, "png8:".$feuilleFilename;
            system(@params) and die "convert a retourné une erreur";
        }
        else {
            printf "  Conversion en image transparente pour la feuille \"%s\" dans \"%s\"...\n", $feuille, $feuilleFilename;
            push @params, (qw(-negate -alpha set  -channel RGBA -fill none -opaque black), $feuilleFilename);
            system(@params) and die "convert a retourné une erreur";
        }
    }
    
    unless ( $garderTuiles ) {
       printf "  Effacement des tuiles de la feuille \"%s\"...\n", $feuille;
       unlink @tuileFilepaths;
    }
}

unless ( $garderTuiles ) {
   printf "Suppression du répertoire des tuiles\n";
   rmdir($repertoireTuiles) or warn "Impossible de supprimer $repertoireTuiles : $!";
}

print "Terminé.\n";

__END__
=head1 NAME

cadget - Télécharge les feuilles (en format raster) du cadastre

=head1 SYNOPSIS

   cadget --ville "LA VILLE" --departement NUM [--feuille NOM] [--agrandissement FLOAT] --repertoire [chemin]

   cadget --help

   ATTENTION:
   - le collage des tuiles nécessite ImageMagick
   
Options:

   --ville          Le nom de la ville, par exemple "LE BUGUE"
   --departement    Le numéro du département, par exemple "24"
   --feuille        (optionel) Le nom de la feuille à récupérer spécifiquement, par exemple "C3067000AB01"
   --agrandissement (optionel) le facteur d'agrandissement, 0.08 par défaut. Valeurs empiriques raisonnables: 0.08 à 0.5
   --repertoire     (optionel) répertoire dans lequel sauvegarde les tuiles et le résultat final
   --gardertuiles   (optionel) permet de garder les fichiers PNG correspondant aux tuiles (effacées par défaut)
   --transparence   (optionel) transforme la feuille finale pour un affichage blanc sur transparent (au lieu de noir sur blanc)
   --norognagne     (optionel) désactive le rognage automatique des bords blancs
   --help L'aide

Pour connaitre les noms exactes des villes et feuilles, faire une recherche sur http://www.cadastre.gouv.fr

Exemples:
   Pour télécharger les feuilles de "LE BUGUE" en Dordogne avec une précision faible:
     cadget --ville "LE BUGUE" --departement 24
   Ou en plus court : 
     cadget -v "LE BUGUE" -d 24

   Pour télécharger les feuilles du Buisson-de-Cadouin en Dordogne avec une précision élevée:
     cadget -v "LE BUISSON-DE-CADOUIN" -d 24 -a 0.4

   Pour faciliter le travail de superposition dans JOSM, utiliser l'option --transparence (-t) :
     cadget -v "LE BUGUE" -d 24 -t
   
Pour plus d'information, voir aussi :
http://wiki.openstreetmap.org/wiki/WikiProject_Cadastre_Français/cadget

=head1 HISTORIQUE

2010-11-04 (2)
  Support des proxy via la variable d'environnment http_proxy

2010-11-04
  Ajout de l'option -transparence pour faciliter le travail de superposition (dans JOSM)
  Les bords inutiles (blancs) sont désormais supprimés
  Sans l'option -transparence, la sortie PNG est désormais en couleurs indexées pour alléger les fichiers
  Les tuiles sont désormais téléchargées dans un sous-repertoire
  Corrigé: erreur à propos de make_path avec de vieilles versions des librairies
  
2010-10-26
  Seules les communes de Dordogne marchaient. Corrigé.
  Ajout de l'option --gardertuiles

=cut
